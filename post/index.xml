<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>https://example.com/post/</link>
      <atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 01 Apr 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://example.com/post/</link>
    </image>
    
    <item>
      <title>Пост по прошедшей неделе 2.0</title>
      <link>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%B5%D0%B4%D1%88%D0%B5%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-2.0/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%B5%D0%B4%D1%88%D0%B5%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-2.0/</guid>
      <description>&lt;h2 id=&#34;пост-по-прошедшей-неделе&#34;&gt;Пост по прошедшей неделе&lt;/h2&gt;
&lt;h3 id=&#34;понедельник&#34;&gt;Понедельник&lt;/h3&gt;
&lt;p&gt;Неделя началась с учёбы на удалёнке. Я прослушала лекцию, затем съездила в гости к друзьям, сделала домашнее задание. Продуктивно получилось!&lt;/p&gt;
&lt;h3 id=&#34;вторник&#34;&gt;Вторник&lt;/h3&gt;
&lt;p&gt;Пары сегодня были интересными. На матанализе за правильные ответы раздавали конфеты.&lt;/p&gt;
&lt;h3 id=&#34;среда&#34;&gt;Среда&lt;/h3&gt;
&lt;p&gt;Сегодня мои любимые предметы! День прекрасен.&lt;/p&gt;
&lt;h3 id=&#34;четверг&#34;&gt;Четверг&lt;/h3&gt;
&lt;p&gt;Сегодня мы пытались починить некорректно работающую функцию на С++, и сделали это. Ура! Вечером мы отправились в кино на фильм-катастрофу.&lt;/p&gt;
&lt;h3 id=&#34;пятница&#34;&gt;Пятница&lt;/h3&gt;
&lt;p&gt;Сходила на пары по английскому, сдала работы. А вечером мы отправились гулять по центру города и зашли поужинать в кафе. Идеальное завершение дня.&lt;/p&gt;
&lt;h3 id=&#34;ps&#34;&gt;P.S.&lt;/h3&gt;
&lt;p&gt;Благодарю за прочтение! Такие посты будут выходить раз в 3 недели. Следуйте за мной, чтобы не пропустить ничего интересного.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Язык разметки Markdown</title>
      <link>https://example.com/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</link>
      <pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/</guid>
      <description>&lt;h2 id=&#34;что-такое-языки-разметки-и-с-чем-их-едят&#34;&gt;Что такое языки разметки и с чем их едят?&lt;/h2&gt;
&lt;p&gt;Если вы впервые слышите это словосочетание, то эта статья определённо для вас! Итак, &lt;strong&gt;Язы́к разме́тки&lt;/strong&gt; (текста) &lt;em&gt;в компьютерной терминологии&lt;/em&gt; — набор символов или последовательностей символов, вставляемых в текст для передачи информации о его отображении или строении. Принадлежит классу компьютерных языков. Текстовый документ, написанный с использованием языка разметки, содержит не только сам текст (как последовательность слов и знаков препинания), но и дополнительную информацию о различных его участках — например, указание на заголовки, выделения, списки и т. д. В более сложных случаях язык разметки позволяет вставлять в документ интерактивные элементы и содержание других документов.&lt;/p&gt;
&lt;p&gt;Следует отметить, что язык разметки неполон по Тьюрингу и обычно не считается языком программирования.&lt;/p&gt;
&lt;h2 id=&#34;логическая-и-визуальная-разметки&#34;&gt;Логическая и визуальная разметки&lt;/h2&gt;
&lt;p&gt;Различают логическую и визуальную разметки. В первом случае речь идёт только о том, какую роль играет данный участок документа в его общей структуре (например, «данная строка является заголовком»). Во втором — определяется, как именно будет отображаться этот элемент (например, «данную строку следует отображать жирным шрифтом»). Идея языков разметки состоит в том, что визуальное отображение документа должно автоматически получаться из логической разметки и не зависеть от его непосредственного содержания. Это упрощает автоматическую обработку документа и его отображение в различных условиях (например, один и тот же файл может по-разному отображаться на экране компьютера, мобильного телефона и на печати, поскольку свойства этих устройств вывода существенно различаются). Однако это правило часто нарушается: например, создавая документ в редакторе наподобие MS Word, пользователь может выделять заголовки жирным шрифтом, но нигде не указывать, что эта строка является заголовком.&lt;/p&gt;
&lt;h2 id=&#34;примеры-языков-разметки&#34;&gt;Примеры языков разметки&lt;/h2&gt;
&lt;p&gt;Языки разметки используются везде, где требуется получение форматированного текста[en] на основании одного лишь текста: в типографии (SGML, TeX, PostScript, RTF), пользовательских интерфейсах компьютеров (Microsoft Word, OpenOffice), Всемирной Сети (HTML, XHTML, XML, WML, VML, PGML, SVG, XBRL). Довольно распространён и Markdown, о котором пойдёт речь дальше.&lt;/p&gt;
&lt;h2 id=&#34;синтаксис-markdown&#34;&gt;Синтаксис Markdown&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Оформление элементов текста в Markdown:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Заголовки:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Чтобы создать заголовок, используем знак #:&lt;/p&gt;
&lt;h1 id=&#34;заголовок-1-го-уровня--заголовок-2-го-уровня-и-тд-1&#34;&gt;Заголовок 1-го уровня, ## Заголовок 2-го уровня, и т.д. [1]&lt;/h1&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Тип начертания:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Полужирное начертание (** с двух сторон): &lt;strong&gt;ваш текст&lt;/strong&gt;
Курсивное начертание (* с двух сторон): &lt;em&gt;ваш текст&lt;/em&gt;
Полужирное + курсивное начертание (*** с двух сторон): &lt;em&gt;&lt;strong&gt;ваш текст&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Цитирование (&amp;gt;):&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Ваша цитата&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Списки:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Маркированный (неупорядоченный) список (Обозначаем элементы списка тире или звёздочками):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;пункт 1&lt;/li&gt;
&lt;li&gt;пункт 2&lt;/li&gt;
&lt;li&gt;пункт 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Вложение списков (используем отступы):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;пункт 1
&lt;ul&gt;
&lt;li&gt;подпункт 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;пункт 2
&lt;ul&gt;
&lt;li&gt;подпункт 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Упорядоченный список (используем цифры):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Пункт 1;&lt;/li&gt;
&lt;li&gt;Пункт 2;&lt;/li&gt;
&lt;li&gt;Пункт 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Чтобы вложить один список в другой, также используем отступы.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Гиперссылки (в квадратных скобках пишется название ссылки, а в круглых рядом - веб-сайт):&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/deibatulina/study_2022-2023_os-intro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Мой репозиторий на Github&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Оформление кода (код оформляется символами ``` сверху и снизу):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Формулы и их отображение:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Чтобы поставить нижний индекс, используем знак тильды (~):&lt;/p&gt;
&lt;p&gt;H~2~0&lt;/p&gt;
&lt;p&gt;Чтобы поставить степень, пишем знак ^ два раза:&lt;/p&gt;
&lt;p&gt;2^10^&lt;/p&gt;
&lt;p&gt;Знакомая нам со школы формула (основное тригонометрическое тождество) будет выглядеть так (заключаем формулу в знаки доллара с двух сторон):
$\sin^2 (x) + \cos^2 (x) 1$&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Оформление картинок:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Чтобы вставить в текст иллюстрацию, нужно использовать следующий синтаксис (![указываем название изображения](относительный путь к изображению)) (рис. @fig:001):&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;image/test.jpg&#34; alt=&#34;Подпись к изображению&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
{#fig:001 width=70%}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Обработка файлов в формате Markdown (.md):&lt;/p&gt;
&lt;p&gt;Для того, чтобы обрабатывать файлы в таком формате, нам понадобится следующее ПО: &lt;a href=&#34;https://pandoc.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pandoc - официальный сайт&lt;/a&gt;, &lt;a href=&#34;https://github.com/jgm/pandoc/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pandoc-citeproc&lt;/a&gt; и &lt;a href=&#34;https://github.com/lierdakil/pandoc-crossref/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pandoc-crossref&lt;/a&gt;. Все эти программы были установлены мною в ходе выполнения лабораторной работы №1.&lt;/p&gt;
&lt;p&gt;Преобразовать файл README.md можно следующим образом:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pandoc README.md -o README.pdf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Получим файл в формате .pdf, скомпилированный из Markdown. Так же можно скомпилировать и файл в формате .docx.&lt;/p&gt;
&lt;p&gt;А ещё можно использовать Makefile (в папке с отчётом по лабораторной работе и в папке с презентацией по ней он уже есть). В данном файле указываются параметры компиляции.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://example.com/post/post_of_last_week/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/post_of_last_week/</guid>
      <description>&lt;h2 id=&#34;пост-по-прошедшей-неделе&#34;&gt;Пост по прошедшей неделе&lt;/h2&gt;
&lt;h3 id=&#34;понедельник&#34;&gt;Понедельник&lt;/h3&gt;
&lt;p&gt;Началась моя неделя с учебного понедельника на удалёнке. У меня было две пары подряд: математическая логика и технология программирования. Потом я села за домашнее задание, коего у нас, к сожалению, довольно много. Закончив с домашкой, я отправилась в супермаркет за продуктами, а потом готовила еду: свои любимые котлетки с картошкой и овощной салатик. Вечером я готовилась к следующему учебному дню и легла спать относительно рано, в 23:00, чтобы на следующее утро поехать к первой паре в свой любимый университет.&lt;/p&gt;
&lt;h3 id=&#34;вторник&#34;&gt;Вторник&lt;/h3&gt;
&lt;p&gt;Утром я проснулась и поняла, что проспала и в университет я, разумеется, не поехала. Осталась дома, снова решая домашку, чтобы освободить себе выходные. А потом я вспомнила, что нахожусь на больничном официально и этот день не будет считаться прогулом.&lt;/p&gt;
&lt;h3 id=&#34;среда&#34;&gt;Среда&lt;/h3&gt;
&lt;p&gt;8 марта! Мы с моей подругой отправились гулять по городу, нам подарили по чудесному букету тюльпанчиков, мы поели роллов и вечером я отправилась в театр на спектакль &amp;ldquo;Онегин&amp;rdquo;. Представление было поистине шикарным! Домой я вернулась поздно, сразу решив, что в четверг к первой паре я не пойду.&lt;/p&gt;
&lt;h3 id=&#34;четверг&#34;&gt;Четверг&lt;/h3&gt;
&lt;p&gt;Случилось чудо, и к первой паре я пошла! Этот день выдался отличным: мальчики поздравили нас с прошедшим праздником, подарили капкейки и открытки.&lt;/p&gt;
&lt;h3 id=&#34;пятница&#34;&gt;Пятница&lt;/h3&gt;
&lt;p&gt;Утром я делала домашнее задание, а днём отправилась в университет на выступление по Модулю переводчика. Мы оттанцевали, и вместо пар нас отпустили домой. Вечером я готовила доклад по истории. Прекрасный день!&lt;/p&gt;
&lt;h3 id=&#34;суббота&#34;&gt;Суббота&lt;/h3&gt;
&lt;p&gt;Утром я поехала на историю, выступила с докладом, а затем отправилась к деловому центру на мероприятие &amp;ldquo;Найти IT&amp;rdquo;. Там было более 30 российских айти-компаний, рассказывавших о себе и программах стажировок. Мы с подругой получили огромное удовольствие от этого мероприятия, узнали много нового и получили в подарок мерч. Круто провели время!&lt;/p&gt;
&lt;h3 id=&#34;воскресенье&#34;&gt;Воскресенье&lt;/h3&gt;
&lt;p&gt;День учёбы. Я делала домашнее задание, готовилась к следующей неделе, готовила еду. Погода за окном была не впечатляющей, поэтому этот день я решила провести дома, зато с пользой!)&lt;/p&gt;
&lt;h3 id=&#34;ps&#34;&gt;P.S.&lt;/h3&gt;
&lt;p&gt;Благодарю за прочтение! Такие посты будут выходить раз в 3 недели. Следуйте за мной, чтобы не пропустить ничего интересного.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Системы контроля версий. Git</title>
      <link>https://example.com/post/getting-started/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;управление-версиями-git&#34;&gt;Управление версиями. Git.&lt;/h2&gt;
&lt;p&gt;Системы контроля версий (ВКС, внгл. VCS - Vesion Control Systems) применяются при работе нескольких человек над каким-либо проектом. Они позволяют сделать откат к предыдущим версиям проекта, не потеряв при этом новых  наработок и внесённых в проект изменений. К примеру, разработчики выложили новую версию проекта, однако в ней обнаружились ошибки. Чтобы не потерять изменения и исправить ошибки, благодаря системам контроля версий есть возможность вернуться к старому, рабочему варианту, и затем устранить недоработки.&lt;/p&gt;
&lt;p&gt;У пользователей, в свою очередь, есть возможность посмотреть, что именно поменялось, и сравнить новую версию со старой. Разработчики видят, кто и какие внёс изменения в проект, чтобы в случае чего знать, с кого спросить.&lt;/p&gt;
&lt;p&gt;Конечно, можно просто копировать проект в другой каталог, такой подход часто применяется из-за своей простоты, но имеет множество недостатков:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;избыточность (дублируется весь код, а не только изменения);&lt;/li&gt;
&lt;li&gt;нет механизмов для распределения работы между несколькими разработчиками;&lt;/li&gt;
&lt;li&gt;нет данных о том что именно изменилось (обычно пишут history файл с общей информацией об изменениях).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для решения части из этих проблем были разработаны локальные СКВ.
Одной из первых и наиболее популярных СКВ такого типа являлась RCS, которая была разработана в 1985 году.
Для каждого файла, зарегистрированного в системе, она хранит полную историю изменений, причём для текстовых файлов используется эффективный алгоритм дельта-компрессии, когда хранится только последняя версия и все межверсионные изменения.
Такие СКВ решали только первую проблему - избыточность данных.
Современные СКВ можно разделить на две группы: централизованные и распределенные.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Централизованные системы контроля версий&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Следующей основной проблемой оказалась необходимость сотрудничать с разработчиками за другими компьютерами. Чтобы решить её, были созданы централизованные системы контроля версий (ЦСКВ). В таких системах, например CVS, Subversion и Perforce, есть центральный сервер, на котором хранятся все файлы под версионным контролем, и ряд клиентов, которые получают копии файлов из него. Много лет это было стандартом для систем контроля версий.&lt;/p&gt;
&lt;p&gt;Такой подход имеет множество преимуществ, особенно перед локальными СКВ. К примеру, все знают, кто и чем занимается в проекте. У администраторов есть чёткий контроль над тем, кто и что может делать, и, конечно, администрировать ЦСКВ намного легче, чем локальные базы на каждом клиенте.&lt;/p&gt;
&lt;p&gt;Однако при таком подходе есть и несколько серьёзных недостатков. Наиболее очевидный — централизованный сервер является уязвимым местом всей системы. Если сервер выключается на час, то в течение часа разработчики не могут взаимодействовать, и никто не может сохранить новой версии своей работы. Если же повреждается диск с центральной базой данных и нет резервной копии, вы теряете абсолютно всё — всю историю проекта, разве что за исключением нескольких рабочих версий, сохранившихся на рабочих машинах пользователей. Локальные системы контроля версий подвержены той же проблеме: если вся история проекта хранится в одном месте, вы рискуете потерять всё.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Распределённые системы контроля версий&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;И в этой ситуации в игру вступают распределённые системы контроля версий. В таких системах как Git, Mercurial, Bazaar или Darcs клиенты не просто выгружают последние версии файлов, а полностью копируют весь репозиторий (репозиторий, в простонародье репа, это место, где хранятся и поддерживаются какие-либо данные). При этом можно выделить центральный репозиторий (условно), в который будут отправляться изменения из локальных и, с ним же эти локальные репозитории будут синхронизироваться. Поэтому в случае, когда &amp;ldquo;умирает&amp;rdquo; сервер, через который шла работа, любой клиентский репозиторий может быть скопирован обратно на сервер, чтобы восстановить базу данных. Каждый раз, когда клиент забирает свежую версию файлов, он создаёт себе полную копию всех данных.
Кроме того, в большей части этих систем можно работать с несколькими удалёнными репозиториями.&lt;/p&gt;
&lt;p&gt;На сегодняшний день стандартом де-факто стала распределенная система контроля версий - &lt;strong&gt;GIT&lt;/strong&gt;, но в старых больших проектах вполне могут встретиться устаревшие СКВ (например, популярная в свое время Subversion).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Основы GIT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Почти все операции — локальные&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Для совершения большинства операций в Git&amp;rsquo;е необходимы только локальные файлы и ресурсы, т.е. обычно информация с других компьютеров в сети не нужна. К примеру, чтобы показать историю проекта, Git&amp;rsquo;у не нужно скачивать её с сервера, он просто читает её прямо из вашего локального репозитория. Поэтому историю вы увидите практически мгновенно. Если вам нужно просмотреть изменения между текущей версией файла и версией, сделанной месяц назад, Git может взять файл месячной давности и вычислить разницу на месте, вместо того чтобы запрашивать разницу у СКВ-сервера или качать с него старую версию файла и делать локальное сравнение.&lt;/p&gt;
&lt;p&gt;Кроме того, работа локально означает, что практически все можно сделать без доступа к Сети. Если вы в самолёте или в поезде и хотите немного поработать, можно спокойно делать коммиты, а отправить их, как только станет доступна сеть.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Чаще всего данные в Git только добавляются&lt;/em&gt;
Практически все действия, которые вы совершаете в Git&amp;rsquo;е, только добавляют данные в базу. Очень сложно заставить систему удалить данные или сделать что-то неотменяемое. Можно, как и в любой другой СКВ, потерять данные, которые вы ещё не сохранили, но как только они зафиксированы, их очень сложно потерять, особенно если вы регулярно отправляете изменения в другой репозиторий.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Три состояния файлов&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;В Git&amp;rsquo;е файлы могут находиться в одном из трёх состояний: зафиксированном, изменённом и подготовленном. &amp;ldquo;Зафиксированный&amp;rdquo; значит, что файл уже сохранён в вашей локальной базе. К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы. Подготовленные файлы — это изменённые файлы, отмеченные для включения в следующий коммит.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Стандартный рабочий процесс с использованием Git&amp;rsquo;а выглядит примерно так:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Вы вносите изменения в файлы в своём рабочем каталоге.&lt;/li&gt;
&lt;li&gt;Подготавливаете файлы, добавляя их слепки в область подготовленных файлов.&lt;/li&gt;
&lt;li&gt;Делаете коммит, который берёт подготовленные файлы и помещает их в каталог Git&amp;rsquo;а на постоянное хранение.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
