<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python | Academic</title>
    <link>https://example.com/tag/python/</link>
      <atom:link href="https://example.com/tag/python/index.xml" rel="self" type="application/rss+xml" />
    <description>python</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 06 May 2023 00:55:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>python</title>
      <link>https://example.com/tag/python/</link>
    </image>
    
    <item>
      <title>Языки научного программирования</title>
      <link>https://example.com/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/</link>
      <pubDate>Sat, 06 May 2023 00:55:00 +0000</pubDate>
      <guid>https://example.com/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/</guid>
      <description>&lt;h2 id=&#34;языки-научного-программирования&#34;&gt;Языки научного программирования&lt;/h2&gt;
&lt;p&gt;В компьютерном программировании научный язык программирования может относиться к двум степеням одного и того же понятия.&lt;/p&gt;
&lt;p&gt;В широком смысле научный язык программирования - это язык программирования, который широко используется для вычислительной науки и вычислительной математики. В этом смысле C /C ++ и Python можно считать научными языками программирования.&lt;/p&gt;
&lt;p&gt;В более широком смысле научный язык программирования - это тот, который разработан и оптимизирован для использования математических формул и матриц. Такие языки характеризуются не только наличием библиотек, выполняющих математические или научные функции, но и синтаксисом самого языка. Например, ни C ++, ни Python не имеют встроенных матричных типов или функций для матричной арифметики (сложение, умножение и т.д.); вместо этого эта функциональность становится доступной через стандартные библиотеки. Языки научного программирования в более широком смысле включают ALGOL, APL, Fortran, J, Julia, Maple, MATLAB и R.&lt;/p&gt;
&lt;p&gt;Языки научного программирования не следует путать с научным языком в целом, который в широком смысле обозначает более высокие стандарты точности, корректности и сжатости, ожидаемые от практиков научного метода.&lt;/p&gt;
&lt;h2 id=&#34;примеры&#34;&gt;Примеры&lt;/h2&gt;
&lt;h3 id=&#34;линейная-алгебра&#34;&gt;Линейная алгебра&lt;/h3&gt;
&lt;p&gt;Научные языки программирования предоставляют средства для работы с линейной алгеброй. Например, следующая программа на языке научного программирования Julia решает систему линейных уравнений:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;A = rand(20, 20)  # A - матрица 20x20
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;b = rand(20)      # b - вектор из 20 элементов
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x = A\b           # x - решение A * x = b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Работа с большими векторами и матрицами является ключевой особенностью этих языков, поскольку линейная алгебра закладывает основу для математической оптимизации, которая, в свою очередь, обеспечивает основные приложения, такие как глубокое обучение.&lt;/p&gt;
&lt;h3 id=&#34;математическая-оптимизация&#34;&gt;Математическая оптимизация&lt;/h3&gt;
&lt;p&gt;На научном языке программирования мы можем вычислять оптимумы функций с синтаксисом, близким к математическому языку. Например, следующий код Julia находит минимум многочлена&lt;/p&gt;
&lt;p&gt;$$
P(x,y)=x^{2}-3xy+5y ^{2}-7y+3
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;использование Optim
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;P(x,y) = x^2 - 3x*y + 5y^2 - 7y + 3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;z₀ = [ 0.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       0.0 ]     # отправная точка для алгоритма оптимизации
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;optimize(z -&amp;gt; P(z...), z₀, Ньютон();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         автодифференцирование = : вперед)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;В этом примере используется методНьютона для минимизации. Современные научные языки программирования будут использовать автоматическое дифференцирование для вычисления градиентов и мешанинных значений функции, задаваемой в качестве входных данных; ср. дифференцируемое программирование. Здесь для этой задачи было выбрано автоматическое прямое дифференцирование. Старые научные языки программирования, такие как почтенный Fortran, потребовали бы от программиста передать рядом с оптимизируемой функцией функцию, которая вычисляет градиент, и функцию, которая вычисляет гессиан.&lt;/p&gt;
&lt;p&gt;С большим знанием функции, которую нужно минимизировать, можно использовать более эффективные алгоритмы. Например, выпуклая оптимизация обеспечивает более быстрые вычисления, когда функция является выпуклой, квадратичное программирование обеспечивает более быстрые вычисления, когда функция является максимально квадратичной по своим переменным, и линейное программирование, когда функция является максимально линейной.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
